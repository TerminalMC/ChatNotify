plugins {
    id "java"
    id "java-library"
    id "idea"
    id "maven-publish"
//    id "org.jetbrains.gradle.plugin.idea-ext" version "${ideaext_version}" // Required for NeoGradle
}

subprojects {
    version = mod_version
    group = mod_group

    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: "maven-publish"

    java.toolchain.languageVersion = JavaLanguageVersion.of(Integer.valueOf(java_version))

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    "Specification-Title"     : mod_name,
                    "Specification-Vendor"    : mod_owner,
                    "Specification-Version"   : project.jar.archiveVersion,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_owner,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Timestamp"               : System.currentTimeMillis(),
                    "Built-On-Java"           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    "Built-On-Minecraft"      : minecraft_version
            ])
        }
    }

    repositories {
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.getRelease().set(Integer.valueOf(java_version))
    }

    processResources {
        def expandProps = [
                "project_group": project.group,
                "mod_version": mod_version,
                "mod_group": mod_group,
                "mod_id": mod_id,
                "mod_name": mod_name,
                "mod_description": mod_description,
                "mod_icon": "assets/" + mod_id + "/icon.png",
                "mod_owner": mod_owner,
                "mod_authors_list": mod_authors.split(",").collect { "\"$it\"" }.join(','),
                "mod_contributors_list": mod_contributors.split(",").collect { "\"$it\"" }.join(','),
                "mod_authors_string": mod_authors.replace(",", ", "),
                "mod_contributors_string": mod_contributors.replace(",", ", "),
                "mod_license": mod_license,
                "mod_environment": mod_environment,
                "java_version": java_version,
                "java_versions_fabric": java_versions_fabric,
                "java_versions_neoforge": java_versions_neoforge,
                "minecraft_version": minecraft_version,
                "minecraft_versions_fabric": minecraft_versions_fabric,
                "minecraft_versions_neoforge": minecraft_versions_neoforge,
                "fabric_loader_version": fabric_loader_version,
                "fabric_loader_versions": fabric_loader_versions,
                "fabric_api_version": fabric_api_version,
                "fabric_api_versions": fabric_api_versions,
                "forge_loader_versions": forge_loader_versions,
                "forge_version": forge_version,
                "forge_versions": forge_versions,
//                "neoforge_loader_versions": neoforge_loader_versions,
//                "neoforge_version": neoforge_version,
//                "neoforge_versions": neoforge_versions,
                "modmenu_version": modmenu_version,
                "modmenu_versions": modmenu_versions,
                "homepage_url": homepage_url,
                "sources_url": sources_url,
                "issues_url": issues_url,
                "contact_url": contact_url
        ]

        filesMatching(["pack.mcmeta", "*.mod.json", "META-INF/mods.toml", "*.mixins.json"]) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    // Sources and Javadoc
//    java.withSourcesJar()
//    java.withJavadocJar()
//
//    sourcesJar {
//        from(rootProject.file("LICENSE")) {
//            rename { "${it}_${mod_name}" }
//        }
//    }
}
